const e={ID:"token-action-hud-pf2e"},t={ID:"token-action-hud-core"},s="1.2",i={1:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",2:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",3:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",free:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",reaction:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",passive:""},a={acrobatics:"acr",arcana:"arc",athletics:"ath",crafting:"cra",deception:"dec",diplomacy:"dip",intimidation:"itm",medicine:"med",nature:"nat",occultism:"occ",performance:"prf",religion:"rel",society:"soc",stealth:"ste",survival:"sur",thievery:"thi"},n={melee:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/sword.svg" title="Melee Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">',thrown:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/thrown.svg" title="Thrown Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">'},o={melee:{name:"PF2E.WeaponRangeMelee"},ranged:{name:"PF2E.NPCAttackRanged"},thrown:{name:"PF2E.TraitThrown"}};let r=null;Hooks.on("i18nInit",(async()=>{r={categories:[{nestId:"attack",id:"attack",name:game.i18n.localize("PF2E.AttackLabel"),subcategories:[{nestId:"attack_attack",id:"attack",name:game.i18n.localize("PF2E.AttackLabel"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"actions",id:"actions",name:game.i18n.localize("PF2E.ActionsActionsHeader"),subcategories:[{nestId:"actions_toggles",id:"toggles",name:game.i18n.localize("PF2E.TogglesLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_strikes",id:"strikes",name:game.i18n.localize("PF2E.StrikesLabel"),type:"system",hasDerivedSubcategories:!0},{nestId:"actions_actions",id:"actions",name:game.i18n.localize("PF2E.ActionsActionsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_reactions",id:"reactions",name:game.i18n.localize("PF2E.ActionsReactionsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_free-actions",id:"free-actions",name:game.i18n.localize("PF2E.ActionsFreeActionsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_passives",id:"passives",name:game.i18n.localize("PF2E.NPC.PassivesLabel"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"inventory",id:"inventory",name:game.i18n.localize("PF2E.TabInventoryLabel"),subcategories:[{nestId:"inventory_weapons",id:"weapons",name:game.i18n.localize("PF2E.InventoryWeaponsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_armor",id:"armor",name:game.i18n.localize("PF2E.InventoryArmorHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_equipment",id:"equipment",name:game.i18n.localize("PF2E.InventoryEquipmentHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_consumables",id:"consumables",name:game.i18n.localize("PF2E.InventoryConsumablesHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_containers",id:"containers",name:game.i18n.localize("PF2E.InventoryBackpackHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_treasure",id:"treasure",name:game.i18n.localize("PF2E.InventoryTreasureHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"feats",id:"feats",name:game.i18n.localize("PF2E.TabFeatsLabel"),subcategories:[{nestId:"feats_ancestry-features",id:"ancestry-features",name:game.i18n.localize("PF2E.FeaturesAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_class-features",id:"class-features",name:game.i18n.localize("PF2E.FeaturesClassHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_ancestry-feats",id:"ancestry-feats",name:game.i18n.localize("PF2E.FeatAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_class-feats",id:"class-feats",name:game.i18n.localize("PF2E.FeatClassHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_skill-feats",id:"skill-feats",name:game.i18n.localize("PF2E.FeatSkillHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_general-feats",id:"general-feats",name:game.i18n.localize("PF2E.FeatGeneralHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_general-feats",id:"general-feats",name:game.i18n.localize("PF2E.FeatBonusHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"spells",id:"spells",name:game.i18n.localize("PF2E.SpellLabelPlural"),subcategories:[{nestId:"spells_spells",id:"spells",name:game.i18n.localize("PF2E.SpellLabelPlural"),type:"system",hasDerivedSubcategories:!0}]},{nestId:"attributes",id:"attributes",name:game.i18n.localize("tokenActionHud.pf2e.attributes"),subcategories:[{nestId:"attributes_hero-points",id:"hero-points",name:game.i18n.localize("PF2E.HeroPointsLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"attributes_initiative",id:"initiative",name:game.i18n.localize("PF2E.InitiativeLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"attributes_perception-check",id:"perception-check",name:game.i18n.localize("PF2E.PerceptionLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"attributes_saves",id:"saves",name:game.i18n.localize("PF2E.SavesHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"skills",id:"skills",name:game.i18n.localize("PF2E.SkillsLabel"),subcategories:[{nestId:"skills_core-skills",id:"core-skills",name:game.i18n.localize("PF2E.CoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"skills_lore-skills",id:"lore-skills",name:game.i18n.localize("PF2E.LoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"effects",id:"effects",name:game.i18n.localize("PF2E.EffectsLabel"),subcategories:[{nestId:"effects_conditions",id:"conditions",name:game.i18n.localize("PF2E.ConditionsLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"effects_effects",id:"effects",name:game.i18n.localize("PF2E.EffectsLabel"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"utility",id:"utility",name:game.i18n.localize("tokenActionHud.utility"),subcategories:[{nestId:"utility_combat",id:"combat",name:game.i18n.localize("tokenActionHud.combat"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_token",id:"token",name:game.i18n.localize("tokenActionHud.token"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_recovery-check",id:"recovery-check",name:game.i18n.localize("PF2E.Check.Specific.Recovery"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_rests",id:"rests",name:game.i18n.localize("tokenActionHud.pf2e.rests"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_utility",id:"utility",name:game.i18n.localize("tokenActionHud.utility"),type:"system",hasDerivedSubcategories:!1}]}],subcategories:[{id:"attack",name:game.i18n.localize("PF2E.AttackLabel"),type:"system",hasDerivedSubcategories:!1},{id:"toggles",name:game.i18n.localize("PF2E.TogglesLabel"),type:"system",hasDerivedSubcategories:!1},{id:"strikes",name:game.i18n.localize("PF2E.StrikesLabel"),type:"system",hasDerivedSubcategories:!0},{id:"actions",name:game.i18n.localize("PF2E.ActionsActionsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"reactions",name:game.i18n.localize("PF2E.ActionsReactionsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"free-actions",name:game.i18n.localize("PF2E.ActionsFreeActionsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"passives",name:game.i18n.localize("PF2E.NPC.PassivesLabel"),type:"system",hasDerivedSubcategories:!1},{id:"weapons",name:game.i18n.localize("PF2E.InventoryWeaponsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"armor",name:game.i18n.localize("PF2E.InventoryArmorHeader"),type:"system",hasDerivedSubcategories:!1},{id:"equipment",name:game.i18n.localize("PF2E.InventoryEquipmentHeader"),type:"system",hasDerivedSubcategories:!1},{id:"consumables",name:game.i18n.localize("PF2E.InventoryConsumablesHeader"),type:"system",hasDerivedSubcategories:!1},{id:"containers",name:game.i18n.localize("PF2E.InventoryBackpackHeader"),type:"system",hasDerivedSubcategories:!1},{id:"treasure",name:game.i18n.localize("PF2E.InventoryTreasureHeader"),type:"system",hasDerivedSubcategories:!1},{id:"ancestry-features",name:game.i18n.localize("PF2E.FeaturesAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{id:"class-features",name:game.i18n.localize("PF2E.FeaturesClassHeader"),type:"system",hasDerivedSubcategories:!1},{id:"ancestry-feats",name:game.i18n.localize("PF2E.FeatAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{id:"class-feats",name:game.i18n.localize("PF2E.FeatClassHeader"),type:"system",hasDerivedSubcategories:!1},{id:"skill-feats",name:game.i18n.localize("PF2E.FeatSkillHeader"),type:"system",hasDerivedSubcategories:!1},{id:"general-feats",name:game.i18n.localize("PF2E.FeatGeneralHeader"),type:"system",hasDerivedSubcategories:!1},{id:"bonus-feats",name:game.i18n.localize("PF2E.FeatBonusHeader"),type:"system",hasDerivedSubcategories:!1},{id:"spells",name:game.i18n.localize("PF2E.SpellLabelPlural"),type:"system",hasDerivedSubcategories:!0},{id:"hero-points",name:game.i18n.localize("PF2E.HeroPointsLabel"),type:"system",hasDerivedSubcategories:!1},{id:"initiative",name:game.i18n.localize("PF2E.InitiativeLabel"),type:"system",hasDerivedSubcategories:!1},{id:"perception-check",name:game.i18n.localize("PF2E.PerceptionLabel"),type:"system",hasDerivedSubcategories:!1},{id:"core-skills",name:game.i18n.localize("PF2E.CoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"lore-skills",name:game.i18n.localize("PF2E.LoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"conditions",name:game.i18n.localize("PF2E.ConditionsLabel"),type:"system",hasDerivedSubcategories:!1},{id:"effects",name:game.i18n.localize("PF2E.EffectsLabel"),type:"system",hasDerivedSubcategories:!1},{id:"combat",name:game.i18n.localize("tokenActionHud.combat"),type:"system",hasDerivedSubcategories:!1},{id:"token",name:game.i18n.localize("tokenActionHud.token"),type:"system",hasDerivedSubcategories:!1},{id:"recovery-check",name:game.i18n.localize("PF2E.Check.Specific.Recovery"),type:"system",hasDerivedSubcategories:!1},{id:"rests",name:game.i18n.localize("tokenActionHud.pf2e.rests"),type:"system",hasDerivedSubcategories:!1},{id:"saves",name:game.i18n.localize("PF2E.SavesHeader"),type:"system",hasDerivedSubcategories:!1},{id:"utility",name:game.i18n.localize("tokenActionHud.utility"),type:"system",hasDerivedSubcategories:!1}]}}));const c=await import("../../token-action-hud-core/scripts/token-action-hud-core.min.js"),l=c.ActionHandler,d=c.ActionListExtender,u=c.CategoryManager,m=c.PreRollHandler,h=c.RollHandler,y=c.SystemManager,p=c.Utils,g=c.Logger;class Utils{static getSetting(t,s=null){let i=s??null;try{i=game.settings.get(e.ID,t)}catch{g.debug(`Setting '${t}' not found`)}return i}static async setSetting(t,s){try{s=await game.settings.set(e.ID,t,s),g.debug(`Setting '${t}' set to '${s}'`)}catch{g.debug(`Setting '${t}' not found`)}}}class ActionHandler extends l{actor=null;actors=null;actorId=null;actorType=null;character=null;token=null;tokenId=null;items=null;abbreviateSkills=null;calculateAttackPenalty=null;subcategoryIds=null;activationSubcategoryIds=null;effectSubcategoryIds=null;featSubcategoryIds=null;inventorySubcategoryIds=null;spellSubcategoryIds=null;featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(e,t){this.actor=e?.actor,this.actorId=this.actor?.id??"multi",this.actors="multi"===this.actorId?this._getActors():[this.actor],this.actorType=this.actor?.type,this.token=e?.token,this.tokenId=this.token?.id??"multi";if(!this.actorType||["character","npc","familiar"].includes(this.actorType)){if("multi"!==this.actorId){let e=this.actor.items;e=this.sortItemsByName(e),this.items=e}this.abbreviateSkills=Utils.getSetting("abbreviateSkills"),this.calculateAttackPenalty=Utils.getSetting("calculateAttackPenalty"),this.subcategoryIds=t,this.actionSubcategoryIds=t.filter((e=>"actions"===e||"reactions"===e||"free-actions"===e||"passives"===e)),this.featSubcategoryIds=t.filter((e=>"ancestry-features"===e||"class-features"===e||"ancestry-feats"===e||"class-feats"===e||"skill-feats"===e||"general-feats"===e||"bonus-feats"===e)),this.inventorySubcategoryIds=t.filter((e=>"equipped"===e||"consumables"===e||"containers"===e||"equipment"===e||"loot"===e||"tools"===e||"weapons"===e||"unequipped"===e)),this.skillSubcategoryIds=t.filter((e=>"core-skills"===e||"lore-skills"===e)),"character"===this.actorType&&await this._buildCharacterActions(),"familiar"===this.actorType&&await this._buildFamiliarActions(),"npc"===this.actorType&&await this._buildNpcActions(),this.actor||this._buildMultipleTokenActions()}}async _buildCharacterActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildHeroPoints(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildRecoveryCheck(),this._buildRests(),this._buildSaves(),this._buildSkills(),await this._buildSpells(),this._buildStrikes(),this._buildToggles()}async _buildFamiliarActions(){this._buildAttack(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}async _buildNpcActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills(),this._buildStrikes(),await this._buildSpells()}_buildMultipleTokenActions(){this._buildInitiative(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}_buildActions(){if(!this.actionSubcategoryIds)return;if(0===this.items.size)return;const e=new Map([...this.items].filter((e=>"action"===e[1].type))),t=new Map;for(const[s,i]of e){const e=i.system.actionType?.value;switch(e){case"action":t.has("actions")||t.set("actions",new Map),t.get("actions").set(s,i);break;case"reaction":t.has("reactions")||t.set("reactions",new Map),t.get("reactions").set(s,i);break;case"free":t.has("free-actions")||t.set("free-actions",new Map),t.get("free-actions").set(s,i);break;case"passive":t.has("passives")||t.set("passives",new Map),t.get("passives").set(s,i)}}for(const e of this.actionSubcategoryIds){if(!t.has(e))continue;const s={id:e,type:"system"},i=t.get(e);this._addActions(i,s,"action")}}_buildAttack(){if(!this.subcategoryIds.includes("attack"))return;const e="familiarAttack",t=this.actor.system.attack;if(t){const s=t.slug,i=t.name.charAt(0).toUpperCase()+t.name.slice(1),a=[e,this.actorId,this.tokenId,s].join(this.delimiter),n=[{id:s,name:i,encodedValue:a,info1:t.totalModifier<0?t.totalModifier:`+${t.totalModifier}`}],o={id:"attack",type:"system"};this.addActionsToActionList(n,o)}}_buildCombat(){if(!this.subcategoryIds.includes("combat"))return;const e="utility",t={endTurn:{id:"endTurn",name:p.i18n("tokenActionHud.endTurn")}};game.combat?.current?.tokenId!==this.tokenId&&delete t.endTurn;const s=Object.entries(t).map((t=>{const s=t[1].id,i=t[1].name,a=[e,this.actorId,this.tokenId,s].join(this.delimiter);return{id:s,name:i,encodedValue:a}}));this.addActionsToActionList(s,{id:"combat",type:"system"})}async _buildConditions(){if(!this.subcategoryIds.includes("conditions"))return;const e="condition",t=["doomed","dying","wounded"],s=new Map([...this.items].filter((t=>t[1].type===e)).map((e=>{const t=e[1];return[t.slug,t]}))),i=[...game.pf2e.ConditionManager.conditions].map((i=>{const a=i[1].slug,n=s.get(i[0]),o=n?.id,r=i[1].name,c=[e,this.actorId,this.tokenId,a].join(this.delimiter),l=p.getImage(i[1]),d=`toggle${o?" active":""}`;let u="";if(o)if(t.includes(n.slug)){const e=this.actor.system.attributes[n.slug],t=e.value,s=e.max;u={text:s>0?`${t??0}/${s}`:""}}else n.system.value.isValued&&(u={text:n.system.value.value});return{id:a,name:r,encodedValue:c,cssClass:d,img:l,info1:u}}));await this.addActionsToActionList(i,{id:"conditions",type:"system"})}async _buildHeroPoints(){if(!this.subcategoryIds.includes("hero-points"))return;const e="heroPoints",t=this.actor.system.resources?.heroPoints,s=t.value,i=t.max,a=[{id:"heroPoints",name:p.i18n("PF2E.HeroPointsLabel"),encodedValue:[e,this.actorId,this.tokenId,e].join(this.delimiter),info1:{text:i>0?`${s??0}/${i}`:""}}];this.addActionsToActionList(a,{id:"hero-points",type:"system"})}_buildEffects(){if(!this.subcategoryIds.includes("effects"))return;const e=new Map([...this.items].filter((e=>"effect"===e[1].type&&(!e.unidentified||game.user.isGM))));this._addActions(e,{id:"effects",type:"system"},"effect")}_buildFeats(){if(!this.featSubcategoryIds)return;const e={ancestryfeature:"ancestry-features",classfeature:"class-features",ancestry:"ancestry-feats",class:"class-feats",skill:"skill-feats",general:"general-feats",bonus:"bonus-feats"},t=new Map;for(const[e,s]of this.items){const i=s.featType;t.has(i)||t.set(i,new Map),t.get(i).set(e,s)}for(const[s,i]of t){const t=i,a=e[s];if(!this.featSubcategoryIds.includes(a))continue;const n={id:a,type:"system"};this._addActions(t,n,"feat")}}_buildInitiative(){if(!this.subcategoryIds.includes("initiative"))return;const e="multi"!==this.actorId?this.actor.system.attributes.initiative:"PF2E.InitiativeLabel",t=e.totalModifier,s=t||0===t?`${t>0?"+":""}${t}`:"",i=[{id:"initiative",name:e.label?e.label:"string"==typeof e?p.i18n(e):"",encodedValue:["initiative",this.actorId,this.tokenId,"initiative"].join(this.delimiter),info1:{text:s}}];this.addActionsToActionList(i,{id:"initiative",type:"system"})}_buildInventory(){if(!this.inventorySubcategoryIds)return;if(0===this.items.size)return;const e=new Map;for(const[t,s]of this.items){const i=s.system?.quantity>0,a=this._isEquippedItem(s),n=s.type;i&&(a&&(e.has("equipped")||e.set("equipped",new Map),e.get("equipped").set(t,s)),a||(e.has("unequipped")||e.set("unequipped",new Map),e.get("unequipped").set(t,s)),a&&("armor"===n&&"character"===this.actorType&&(e.has("armors")||e.set("armors",new Map),e.get("armors").set(t,s)),"consumable"===n&&(e.has("consumables")||e.set("consumables",new Map),e.get("consumables").set(t,s)),"backpack"===n&&(e.has("containers")||e.set("containers",new Map),e.get("containers").set(t,s)),"equipment"===n&&(e.has("equipment")||e.set("equipment",new Map),e.get("equipment").set(t,s)),"treasure"===n&&(e.has("treasure")||e.set("treasure",new Map),e.get("treasure").set(t,s)),"weapon"===n&&(e.has("weapons")||e.set("weapons",new Map),e.get("weapons").set(t,s))))}for(const t of this.inventorySubcategoryIds){if(!e.has(t))continue;const s={id:t,type:"system"},i=e.get(t);this._addActions(i,s)}}_buildPerceptionCheck(){if(!this.subcategoryIds.includes("perception-check"))return;const e=("multi"!==this.actorId?this.actor.system.attributes.perception:CONFIG.PF2E.attributes.perception).totalModifier,t=e||0===e?`${e>0?"+":""}${e}`:"",s=[{id:"perception",name:p.i18n(CONFIG.PF2E.attributes.perception),encodedValue:["perceptionCheck",this.actorId,this.tokenId,"perception"].join(this.delimiter),info1:{text:t}}];this.addActionsToActionList(s,{id:"perception-check",type:"system"})}_buildRecoveryCheck(){if(!this.subcategoryIds.includes("recovery-check"))return;const e="recoveryCheck",t=this.actor.system.attributes?.dying;if(t?.value>=1){const t=[{id:e,name:p.i18n("PF2E.Check.Specific.Recovery"),encodedValue:[e,this.actorId,this.tokenId,e].join(this.delimiter)}],s={id:"recovery-check",type:"system"};this.addActionsToActionList(t,s)}}_buildRests(){if(!this.subcategoryIds.includes("rests"))return;if("multi"===this.actorId&&!this.actors.every((e=>"character"===e.type)))return;const e="utility",t=[{id:"treatWounds",name:p.i18n("PF2E.Actions.TreatWounds.Label"),encodedValue:[e,this.actorId,this.tokenId,"treatWounds"].join(this.delimiter)},{id:"rest",name:p.i18n("PF2E.Actor.Character.Rest.Label"),encodedValue:[e,this.actorId,this.tokenId,"rest"].join(this.delimiter)}];game.settings.get("pf2e","staminaVariant")&&t.push({id:"takeBreather",name:p.i18n("tokenActionHud.pf2e.takeBreather"),encodedValue:[e,this.actorId,this.tokenId,"takeBreather"].join(this.delimiter)});this.addActionsToActionList(t,{id:"rests",type:"system"})}_buildSaves(){if(!this.subcategoryIds.includes("saves"))return;const e="save",t=("multi"!==this.actorId?Object.entries(this.actor.saves):Object.entries(CONFIG.PF2E.saves)).map((t=>{const s=t[0],i=t[1].label??("string"==typeof t[1]?p.i18n(t[1]):""),a=[e,this.actorId,this.tokenId,s].join(this.delimiter);return{id:s,name:i,encodedValue:a}}));this.addActionsToActionList(t,{id:"saves",type:"system"})}_buildSkills(){if(!this.skillSubcategoryIds)return;const e="skill",t="multi"!==this.actorId?Object.entries(this.actor.skills).filter((e=>!!e[1].label&&e[1].label.length>1)):this._getSharedSkills(),s=new Map;for(const e of t){const t=e[1].lore;s.has("skills")||s.set("skills",new Map),s.get("skills").set(e[0],e[1]),t&&(s.has("lore-skills")||s.set("lore-skills",new Map),s.get("lore-skills").set(e[0],e[1])),t||(s.has("core-skills")||s.set("core-skills",new Map),s.get("core-skills").set(e[0],e[1]))}for(const t of this.skillSubcategoryIds){if(!s.has(t))continue;const i={id:t,type:"system"},n=[...s.get(t)].map((t=>{const s=t[0],i=t[1],n=p.i18n(i.label)??p.i18n(CONFIG.PF2E.skillList[t[0]]),o=this.abbreviatedSkills?a[i.slug]??n:n,r=[e,this.actorId,this.tokenId,s].join(this.delimiter),c=i.check?.mod;return{id:s,name:o,encodedValue:r,info1:c||0===c?`${c>0?"+":""}${c}`:""}}));this.addActionsToActionList(n,i)}}_getSharedSkills(){const e=this.actors.map((e=>Object.entries(e.skills).filter((e=>!!e[1].label&&e[1].label.length>1)))),t=Math.min(...e.map((e=>e.length)));return e.find((e=>e.length===t)).filter((t=>e.every((e=>e.some((e=>e[0]===t[0]))))))}async _buildSpells(){if(!this.subcategoryIds.includes("spells"))return;const e={id:"spells",type:"system"},t=[...this.items].filter((e=>"spellcastingEntry"===e[1].type));for(const s of t){const t=`spells+${s[1].name.slugify({replacement:"-",strict:!0})}`,i={id:t,name:s[1].name,type:"system-derived",info1:this._getSpellDcInfo(s[1]),hasDerivedSubcategories:!0};await this.addSubcategoryToActionList(e,i),this.addSubcategoryInfo(i);const a=await s[1].getSpellData(),n=a.levels.filter((e=>e.active.length>0));for(const e of Object.entries(n)){const s={id:`${t}+${e[1].level}`,name:String(p.i18n(e[1].label)),type:"system-derived"};await this.addSubcategoryToActionList(i,s),await this._addSpellSlotInfo(s,e,a);const n=e[1].active.filter((e=>!e?.expended&&e)).map((e=>e.spell)),o=new Map(n.map((e=>[e.id,e])));await this._addActions(o,s,"spell")}}}async _addSpellSlotInfo(e,t,s){const i=t[1].isCantrip,a=s.isFlexible,n=s.isFocusPool,o=s.isInnate,r=s.isPrepared;if(!n&&(i||o))return;if(!n&&r&&!a)return;const c="spellSlot",l=this.actor.system.resources.focus,d=t[1].uses,u=n?"focus":`slot${t[1].level}`,m="focus"===u?l?.max:d?.max,h={text:m>=0?`${("focus"===u?l?.value:d?.value)??0}/${m}`:""};e.info={info1:h},this.addSubcategoryInfo(e);const y=[{id:`${s.id}>${u}>slotIncrease`,name:"+",encodedValue:[c,this.actorId,this.tokenId,`${s.id}>${u}>slotIncrease`].join(this.delimiter),cssClass:"shrink"},{id:`${s.id}>${u}>slotDecrease`,name:"-",encodedValue:[c,this.actorId,this.tokenId,`${s.id}>${u}>slotDecrease`].join(this.delimiter),cssClass:"shrink"}];this.addActionsToActionList(y,e)}_buildStrikes(){if(!this.subcategoryIds.includes("strikes"))return;const e="strike",t={id:"strikes",type:"system"};let s=this.actor.system.actions.filter((t=>t.type===e&&(t.item.system.quantity>0||"npc"===this.actor.type)));if(s=s.filter(((e,t)=>t===s.findIndex((t=>e.label===t.label&&e.attackRollType===t.attackRollType)))),s)for(const i of s){const s=i.item.id,a=`strikes+${i.slug}`,r={id:a,name:i.label,hasDerivedSubcategories:!0,type:"system-derived"};if(this.addSubcategoryToActionList(t,r),i.auxiliaryActions){const e="auxAction",t=i.auxiliaryActions.map(((e,t)=>({id:encodeURIComponent(`${s}>${t}>`),name:e.label}))),a={img:i.imageUrl};t[0]&&(t[0].img=p.getImage(a));const n=t.map((t=>this._getAction(e,t)));this.addActionsToActionList(n,r)}const c=i.altUsages?[i,...i.altUsages]:[i];for(const t of c){const c=i.glyph;let l;switch(`${t.item.isMelee}_${t.item.isThrown}_${t.item.isRanged}`){case"true_false_false":l="melee";break;case"false_true_true":l="thrown";break;case"false_false_true":l="ranged"}const d={id:`${a}+${l}`,name:t.attackRollType?p.i18n(t.attackRollType):p.i18n(o[l].name),icon:"thrown"!==l&&c?`<span style='font-family: "Pathfinder2eActions"; font-size: var(--font-size-20);'>${c}</span>`:n[l],type:"system-derived"};if(this.addSubcategoryToActionList(r,d),t.ready){const a=t.variants.map(((t,a)=>{const n=encodeURIComponent(`${s}>${a}>`+l),o=t.label.includes("MAP")?i.totalModifier+parseInt(t.label.split(" ")[1]):parseInt(t.label.split(" ")[1]),r=this.calculateAttackPenalty?o>=0?`+${o}`:`${o}`:t.label;return{actionType:e,id:n,name:r}})),n=encodeURIComponent(`${s}>damage>${l}`),o=p.i18n("PF2E.DamageLabel");a.push({actionType:e,id:n,name:o});const r=encodeURIComponent(`${s}>critical>${l}`),c=p.i18n("PF2E.CriticalDamageLabel");if(a.push({actionType:e,id:r,name:c}),t.selectedAmmoId&&!t.ammunition){const s=this.actor.items.get(t.selectedAmmoId);if(s)s.actionType=e,a.push(s);else{const t="noAmmo",s=p.i18n("tokenActionHud.pf2e.noAmmo");a.push({actionType:e,id:t,name:s})}}const u=a.map((t=>this._getAction(e,t)));this.addActionsToActionList(u,d)}}}}_buildToggles(){if(!this.subcategoryIds.includes("toggles"))return;const e="toggle",t=this.actor.system.toggles;if(!t.length)return;const s=t.map((t=>{const s=[t.domain,t.option].join("."),i=p.i18n(t.label);return{id:s,encodedValue:[e,this.actorId,this.tokenId,JSON.stringify(t)].join(this.delimiter),name:i,cssClass:`toggle${t.checked?" active":""}`}}));this.addActionsToActionList(s,{id:"toggles",type:"system"})}_getAttributePoolAction(e,t,s,i){const a=t.slugify({replacement:"-",strict:!0});return{id:a,name:t,encodedValue:[e,this.actorId,this.tokenId,a].join(this.delimiter),info1:{text:`${s}/${i}`}}}async _addActions(e,t,s="item"){if(0===e.size)return;if(!("string"==typeof t?t:t?.id))return;const i=[...e].map((e=>this._getAction(s,e[1])));await this.addActionsToActionList(i,t)}_getAction(e,t){const s=t.id??t._id,i=t?.name??t?.label;let a="";if(Object.hasOwn(t,"disabled")){a=`toggle${t.disabled?"":" active"}`}const n=t?.spellcasting?.id,o=t?.level,r="spell"===e?`${n}>${o}>${s}`:s,c=[e,this.actorId,this.tokenId,r].join(this.delimiter),l=t.system?.actions,d=t.system?.actionType?.value,u=parseInt((l||{}).value,10)||1,m=t.system?.time?.value,h="spell"===e?m:["free","reaction","passive"].includes(d)?d:u,y=this._getActionIcon(h),g=p.getImage(t),b="spell"===e?this._getSpellInfo(t):this._getItemInfo(t),f=b?.info1,k=b?.info2,v=b?.info3;return{id:s,name:i,encodedValue:c,cssClass:a,img:g,icon1:y,info1:f,info2:k,info3:v}}_isSlowAction(e){return["downtime","exploration"].includes(e.system.traits?.value)}_getSpellDcInfo(e){let t="";const s=e.statistic,i="function"==typeof s.dc?s.dc().value:s.dc.value,a=s.check.mod;return t=`${a>=0?`${p.i18n("tokenActionHud.pf2e.atk")} +${a}`:`${p.i18n("tokenActionHud.pf2e.atk")} ${a}`} ${`${p.i18n("tokenActionHud.pf2e.dc")}${i}`}`,t}_getSpellInfo(e){return{info1:this._getComponentsInfo(e),info2:this._getUsesData(e)}}_getComponentsInfo(e){return{text:e.components.value??e.system.components?.value??"",title:Object.entries(e.components).filter((e=>!0===e[1])).map((e=>e[0].trim().charAt(0).toUpperCase()+e[0].slice(1))).join(", ")}}_getUsesData(e){const t=e?.uses?.value,s=e?.uses?.max;return{text:t&&s>=0?`${t}/${s}`:""}}_getActors(){const e=["character","npc"],t=canvas.tokens.controlled.map((e=>e.actor));if(t.every((t=>e.includes(t.type))))return t}_isEquippedItem(e){const t=e.system.equipped?.carryType;return!!this.showUnequippedItems||!(!["held","worn"].includes(t)||e.system.containerId?.value?.length)}_getItemInfo(e){return{info1:{text:this._getQuantityData(e)??""}}}_getQuantityData(e){const t=e?.system?.quantity?.value;return t>1?t:""}_getActionIcon(e){return i[e]}_foundrySort(e,t){return e?.sort||t?.sort?e.sort-t.sort:0}}class RollHandler extends h{BLIND_ROLL_MODE="blindRoll";async doHandleActionEvent(e,t){const s=t.split("|");4!==s.length&&super.throwInvalidValueErr();const i=s[0],a=s[1],n=s[2],o=s[3];if(["item","feat","action","lore","ammo"].includes(i)&&this.isRenderItem())return this.doRenderItem(a,n,o);const r=["character","familiar","npc"];if("multi"===n&&"toggleCombat"!==o){const t=canvas.tokens.controlled.filter((e=>r.includes(e.actor?.type)));for(const s of t){const t=s.actor?.id,a=s.id;await this._handleMacros(e,i,t,a,o)}}else await this._handleMacros(e,i,a,n,o)}async _handleMacros(e,t,s,i,a){const n=p.getActor(s,i);let o;n&&(o=n.type);if(!["ability","spell","item","skill","lore","utility","toggle","strike"].includes(t))switch(o){case"npc":await this._handleUniqueActionsNpc(e,t,n,i,a);break;case"character":case"familiar":await this._handleUniqueActionsChar(e,t,n,i,a)}switch(t){case"ability":this._rollAbility(e,n,a);break;case"action":case"feat":case"item":this._rollItem(n,a);break;case"condition":this._toggleCondition(n,a);break;case"effect":this._adjustEffect(n,a);break;case"spell":await this._rollSpell(n,i,a);break;case"skill":await this._rollSkill(e,n,a);break;case"strike":this._rollStrikeChar(e,n,i,a);break;case"toggle":await this._performToggleMacro(s,i,a);break;case"utility":this._performUtilityMacro(i,a)}}async _handleUniqueActionsChar(e,t,s,i,a){switch(t){case"save":this._rollSave(e,s,a);break;case"attribute":case"initiative":case"perceptionCheck":this._rollAttributeChar(e,s,a);break;case"spellSlot":await this._adjustSpellSlot(s,a);break;case"heroPoints":await this._adjustResources(s,"heroPoints","value",a);break;case"recoveryCheck":s.rollRecovery({event:e});break;case"familiarAttack":this._rollFamiliarAttack(e,s);break;case"auxAction":this._performAuxAction(s,i,a)}}async _handleUniqueActionsNpc(e,t,s,i,a){switch(t){case"attribute":case"initiative":case"perceptionCheck":await this._rollAttributeNpc(e,s,a);break;case"save":this._rollSave(e,s,a);break;case"strike":this._rollStrikeNpc(e,s,i,a)}}async _rollSkill(e,t,s){const i=t.skills[s];await i.check.roll({event:e})}_rollAbility(e,t,s){t.rollAbility(e,s)}_rollAttributeChar(e,t,s){const i=t.system.attributes[s];if(i){const s=t.getRollOptions(["all",i]);i.roll({event:e,options:s})}else t.rollAttribute(e,s)}async _rollAttributeNpc(e,t,s){"initiative"===s?await t.rollInitiative({createCombatants:!0}):t.rollAttribute(e,s)}async _adjustSpellSlot(e,t){const s=decodeURIComponent(t).split(">"),i=s[0],a=s[1],n=s[2],o=e.items.get(i);let r,c,l;if("focus"===a)r=e.system.resources.focus.value,c=e.system.resources.focus.max;else{const e=o.system.slots;r=e[a].value,c=e[a].max}switch(n){case"slotIncrease":if(r>=c)break;r++;break;case"slotDecrease":if(r<=0)break;r--}"focus"===a?e.update({"data.resources.focus.value":r}):(l=[{_id:o.id,data:{slots:{[a]:{value:r}}}}],await Item.updateDocuments(l,{parent:e})),Hooks.callAll("forceUpdateTokenActionHUD")}_rollSave(e,t,s){t.saves[s].check.roll({event:e})}async _updateRollMode(e){await game.settings.set("core","rollMode",e)}_rollStrikeChar(e,t,s,i){const a=decodeURIComponent(i).split(">"),n=a[0],o=a[1],r=a[2]?a[2]:null;let c=t.system.actions.filter((e=>"strike"===e.type)).find((e=>(e.item.id??e.slug)===n));if(this.isRenderItem()){const e=c.item;if(e&&"xxPF2ExUNARMEDxx"!==e.id)return this.doRenderItem(t.id,s,e.id)}switch(null!==r&&c.altUsages?.length&&("melee"!==r||c.item.isMelee||(c=c.altUsages.find((e=>e.item.isMelee))),"thrown"===r&&(c=c.altUsages.find((e=>e.item.isThrown)))),o){case"damage":c.damage({event:e});break;case"critical":c.critical({event:e});break;default:c.variants[o]?.roll({event:e})}}_performAuxAction(e,t,s){const i=decodeURIComponent(s).split(">"),a=i[0],n=i[1],o=i[2];let r=e.system.actions.filter((e=>"strike"===e.type)).find((e=>(e.item.id??e.slug)===a));if(this.isRenderItem()){const s=r.origin;if(s)return this.doRenderItem(e.id,t,s.id)}""!==o&&(r=r[o]),r.auxiliaryActions[n]?.execute()}_rollStrikeNpc(e,t,s,i){const a=decodeURIComponent(i).split(">"),n=a[0],o=a[1];if("plus"===n){const e=t.items.find((e=>0===o.toUpperCase().localeCompare(e.name.toUpperCase(),void 0,{sensitivity:"base"})));return this.isRenderItem()?this.doRenderItem(t.id,s,e.id):void e.toChat()}if(this.isRenderItem())return this.doRenderItem(t.id,s,n);const r=t.items.get(n);switch(o){case"damage":r.rollNPCDamage(e);break;case"critical":r.rollNPCDamage(e,!0);break;case"0":r.rollNPCAttack(e);break;case"1":r.rollNPCAttack(e,2);break;case"2":r.rollNPCAttack(e,3)}}_rollItem(e,t){e.items.get(t).toChat()}_rollFamiliarAttack(e,t){const s=t.getRollOptions(["all","attack"]);t.system.attack.roll(e,s)}async _rollSpell(e,t,s){const i=decodeURIComponent(s).split(">"),[a,n,o,r]=i;if(this.isRenderItem())return this.doRenderItem(e.id,t,o);const c=e.items.get(a),l=e.items.get(o);c&&l&&(await c.cast(l,{message:!r,consume:!0,level:Number(n)}),Hooks.callAll("forceUpdateTokenActionHUD"))}async _performUtilityMacro(e,t){const s=p.getToken(e);switch(t){case"treatWounds":this._executeMacroById("6duZj0Ygiqv712rq");break;case"rest":this._executeMacroById("0GU2sdy3r2MeC56x");break;case"takeBreather":this._executeMacroById("aS6F7PSUlS9JM5jr");break;case"toggleCombat":s.toggleCombat(),Hooks.callAll("forceUpdateTokenActionHUD");break;case"toggleVisibility":s.toggleVisibility();break;case"endTurn":game.combat?.current?.tokenId===e&&await(game.combat?.nextTurn())}}async _executeMacroById(e){game.packs.get("pf2e.pf2e-macros").getDocument(e).then((e=>e.execute()))}async _adjustResources(e,t,s,i){let a=e.system.resources[t][s];const n=e.system.resources[t].max;if(this.rightClick){if(a<=0)return;a--}else{if(a>=n)return;a++}const o=[{_id:e.id,data:{resources:{[t]:{[s]:a}}}}];await Actor.updateDocuments(o),Hooks.callAll("forceUpdateTokenActionHUD")}async _toggleCondition(e,t){this.rightClick?e.decreaseCondition(t):e.increaseCondition(t),Hooks.callAll("forceUpdateTokenActionHUD")}async _adjustEffect(e,t){const s=p.getItem(e,t);this.rightClick?s.decrease():s.increase(),Hooks.callAll("forceUpdateTokenActionHUD")}async _performToggleMacro(e,t,s){const i=p.getActor(e,t),a=JSON.parse(s);a.domain&&a.option&&await i.toggleRollOption(a.domain,a.option,a.itemId)}}function register(t){game.settings.register(e.ID,"calculateAttackPenalty",{name:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}class SystemManager extends y{doGetCategoryManager(e){return new u}doGetActionHandler(e){return new ActionHandler(e)}getAvailableRollHandlers(){return{core:"Core PF2E"}}doGetRollHandler(e){let t;return t=new RollHandler,t}doRegisterSettings(e){register(e)}async doRegisterDefaultFlags(){return r}}Hooks.once("ready",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.2",SystemManager:SystemManager},Hooks.call("tokenActionHudSystemReady",t)}));export{i as ACTION_ICONS,ActionHandler,t as CORE_MODULE,l as CoreActionHandler,d as CoreActionListExtender,u as CoreCategoryManager,m as CorePreRollHandler,h as CoreRollHandler,y as CoreSystemManager,p as CoreUtils,r as DEFAULTS,g as Logger,e as MODULE,s as REQUIRED_CORE_MODULE_VERSION,RollHandler,a as SKILL_ABBREVIATIONS,n as STRIKE_ICONS,o as STRIKE_USAGES,SystemManager,Utils,register};
