const e={ID:"token-action-hud-pf2e"},t={ID:"token-action-hud-core"},i="1.2",s={1:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",2:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",3:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",free:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",reaction:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",passive:""},a={action:"ITEM.TypeAction",attribute:"tokenActionHud.pf2e.attribute",auxAction:"PF2E.WeaponStrikeLabel",condition:"ITEM.TypeCondition",effect:"ITEM.TypeEffect",familiarAttack:"PF2E.AttackLabel",feat:"PF2E.Item.Feat.LevelLabel",item:"PF2E.ItemTitle",save:"tokenActionHud.pf2e.save",skill:"PF2E.SkillLabel",spell:"ITEM.TypeSpell",strike:"PF2E.WeaponStrikeLabel",toggle:"tokenActionHud.pf2e.toggle",utility:"tokenActionHud.utility"},n={acrobatics:"acr",arcana:"arc",athletics:"ath",crafting:"cra",deception:"dec",diplomacy:"dip",intimidation:"itm",medicine:"med",nature:"nat",occultism:"occ",performance:"prf",religion:"rel",society:"soc",stealth:"ste",survival:"sur",thievery:"thi"},o={melee:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/sword.svg" title="Melee Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">',thrown:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/thrown.svg" title="Thrown Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">'},l={melee:{name:"PF2E.WeaponRangeMelee"},ranged:{name:"PF2E.NPCAttackRanged"},thrown:{name:"PF2E.TraitThrown"}},c=await import("../../token-action-hud-core/scripts/token-action-hud-core.min.js"),r=c.ActionHandler,d=c.ActionListExtender,m=c.CategoryManager,u=c.PreRollHandler,h=c.RollHandler,p=c.SystemManager,y=c.Utils,g=c.Logger;class Utils{static getSetting(t,i=null){let s=i??null;try{s=game.settings.get(e.ID,t)}catch{g.debug(`Setting '${t}' not found`)}return s}static async setSetting(t,i){try{i=await game.settings.set(e.ID,t,i),g.debug(`Setting '${t}' set to '${i}'`)}catch{g.debug(`Setting '${t}' not found`)}}}class ActionHandler extends r{actor=null;actors=null;actorId=null;actorType=null;character=null;token=null;tokenId=null;items=null;abbreviateSkills=null;calculateAttackPenalty=null;colorSkills=null;subcategoryIds=null;activationSubcategoryIds=null;effectSubcategoryIds=null;inventorySubcategoryIds=null;spellSubcategoryIds=null;featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(e,t){this.actor=e?.actor,this.actorId=this.actor?.id??"multi",this.actors="multi"===this.actorId?this._getActors():[this.actor],this.actorType=this.actor?.type,this.token=e?.token,this.tokenId=this.token?.id??"multi";if(!this.actorType||["character","npc","familiar"].includes(this.actorType)){if("multi"!==this.actorId){let e=this.actor.items;e=this.sortItemsByName(e),this.items=e}this.abbreviateSkills=Utils.getSetting("abbreviateSkills"),this.calculateAttackPenalty=Utils.getSetting("calculateAttackPenalty"),this.colorSkills=Utils.getSetting("colorSkills"),this.subcategoryIds=t,"character"===this.actorType&&await this._buildCharacterActions(),"familiar"===this.actorType&&await this._buildFamiliarActions(),"npc"===this.actorType&&await this._buildNpcActions(),this.actor||this._buildMultipleTokenActions()}}async _buildCharacterActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildHeroPoints(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildRecoveryCheck(),this._buildRests(),this._buildSaves(),this._buildSkills(),await this._buildSpells(),this._buildStrikes(),this._buildToggles()}async _buildFamiliarActions(){this._buildAttack(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}async _buildNpcActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills(),this._buildStrikes(),await this._buildSpells()}_buildMultipleTokenActions(){this._buildInitiative(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}_buildActions(){if(0===this.items.size)return;const e=new Map([...this.items].filter((e=>"action"===e[1].type))),t=new Map;for(const[i,s]of e){const e=s.system.actionType?.value;switch(e){case"action":t.has("actions")||t.set("actions",new Map),t.get("actions").set(i,s);break;case"reaction":t.has("reactions")||t.set("reactions",new Map),t.get("reactions").set(i,s);break;case"free":t.has("free-actions")||t.set("free-actions",new Map),t.get("free-actions").set(i,s);break;case"passive":t.has("passives")||t.set("passives",new Map),t.get("passives").set(i,s)}}for(const[e,i]of t){const t=i,s={id:e,type:"system"};this._addActions(t,s,"action")}}_buildAttack(){const e="familiarAttack",t=this.actor.system.attack;if(t){const i=t.slug,s=t.name.charAt(0).toUpperCase()+t.name.slice(1),n=`${`${y.i18n(a[e])}: `??""}${s}`,o=[e,this.actorId,this.tokenId,i].join(this.delimiter),l=[{id:i,name:s,encodedValue:o,info1:t.totalModifier<0?t.totalModifier:`+${t.totalModifier}`,listName:n}],c={id:"attack",type:"system"};this.addActionsToActionList(l,c)}}_buildCombat(){const e="utility",t={endTurn:{id:"endTurn",name:y.i18n("tokenActionHud.endTurn")}};game.combat?.current?.tokenId!==this.tokenId&&delete t.endTurn;const i=Object.entries(t).map((t=>{const i=t[1].id,s=t[1].name,n=`${`${y.i18n(a[e])}: `??""}${s}`,o=[e,this.actorId,this.tokenId,i].join(this.delimiter);return{id:i,name:s,encodedValue:o,listName:n}}));this.addActionsToActionList(i,{id:"combat",type:"system"})}async _buildConditions(){const e="condition",t=["doomed","dying","wounded"],i=new Map([...this.items].filter((t=>t[1].type===e)).map((e=>{const t=e[1];return[t.slug,t]}))),s=[...game.pf2e.ConditionManager.conditions].map((s=>{const n=s[1].slug,o=i.get(s[0]),l=o?.id,c=s[1].name,r=`${`${y.i18n(a[e])}: `??""}${c}`,d=[e,this.actorId,this.tokenId,n].join(this.delimiter),m=y.getImage(s[1]),u=`toggle${l?" active":""}`;let h="";if(l)if(t.includes(o.slug)){const e=this.actor.system.attributes[o.slug],t=e.value,i=e.max;h={text:i>0?`${t??0}/${i}`:""}}else o.system.value.isValued&&(h={text:o.system.value.value});return{id:n,name:c,encodedValue:d,cssClass:u,img:m,info1:h,listName:r}}));await this.addActionsToActionList(s,{id:"conditions",type:"system"})}async _buildHeroPoints(){const e="heroPoints",t=this.actor.system.resources?.heroPoints,i=t.value,s=t.max,a=[{id:"heroPoints",name:y.i18n("PF2E.HeroPointsLabel"),encodedValue:[e,this.actorId,this.tokenId,e].join(this.delimiter),info1:{text:s>0?`${i??0}/${s}`:""}}];this.addActionsToActionList(a,{id:"hero-points",type:"system"})}_buildEffects(){const e=new Map([...this.items].filter((e=>"effect"===e[1].type&&(!e.unidentified||game.user.isGM))));this._addActions(e,{id:"effects",type:"system"},"effect")}_buildFeats(){const e={ancestryfeature:"ancestry-features",classfeature:"class-features",ancestry:"ancestry-feats",class:"class-feats",skill:"skill-feats",general:"general-feats",bonus:"bonus-feats"},t=new Map;for(const[i,s]of this.items){const a=e[s.featType];t.has(a)||t.set(a,new Map),t.get(a).set(i,s)}for(const[e,i]of t){const t=i,s={id:e,type:"system"};this._addActions(t,s,"feat")}}_buildInitiative(){const e="multi"!==this.actorId?this.actor.system.attributes.initiative:"PF2E.InitiativeLabel",t=e.totalModifier,i=t||0===t?`${t>0?"+":""}${t}`:"",s=[{id:"initiative",name:e.label?e.label:"string"==typeof e?y.i18n(e):"",encodedValue:["initiative",this.actorId,this.tokenId,"initiative"].join(this.delimiter),info1:{text:i}}];this.addActionsToActionList(s,{id:"initiative",type:"system"})}_buildInventory(){if(0===this.items.size)return;const e=new Map;for(const[t,i]of this.items){const s=i.system?.quantity>0,a=this._isEquippedItem(i),n=i.type;s&&(a&&(e.has("equipped")||e.set("equipped",new Map),e.get("equipped").set(t,i)),a||(e.has("unequipped")||e.set("unequipped",new Map),e.get("unequipped").set(t,i)),a&&("armor"===n&&"character"===this.actorType&&(e.has("armors")||e.set("armors",new Map),e.get("armors").set(t,i)),"consumable"===n&&(e.has("consumables")||e.set("consumables",new Map),e.get("consumables").set(t,i)),"backpack"===n&&(e.has("containers")||e.set("containers",new Map),e.get("containers").set(t,i)),"equipment"===n&&(e.has("equipment")||e.set("equipment",new Map),e.get("equipment").set(t,i)),"treasure"===n&&(e.has("treasure")||e.set("treasure",new Map),e.get("treasure").set(t,i)),"weapon"===n&&(e.has("weapons")||e.set("weapons",new Map),e.get("weapons").set(t,i))))}for(const[t,i]of e){const e=i,s={id:t,type:"system"};this._addActions(e,s)}}_buildPerceptionCheck(){const e=("multi"!==this.actorId?this.actor.system.attributes.perception:CONFIG.PF2E.attributes.perception).totalModifier,t=e||0===e?`${e>0?"+":""}${e}`:"",i=[{id:"perception",name:y.i18n(CONFIG.PF2E.attributes.perception),encodedValue:["perceptionCheck",this.actorId,this.tokenId,"perception"].join(this.delimiter),info1:{text:t}}];this.addActionsToActionList(i,{id:"perception-check",type:"system"})}_buildRecoveryCheck(){const e="recoveryCheck",t=this.actor.system.attributes?.dying;if(t?.value>=1){const t=[{id:e,name:y.i18n("PF2E.Check.Specific.Recovery"),encodedValue:[e,this.actorId,this.tokenId,e].join(this.delimiter)}],i={id:"recovery-check",type:"system"};this.addActionsToActionList(t,i)}}_buildRests(){if("multi"===this.actorId&&!this.actors.every((e=>"character"===e.type)))return;const e="utility",t=[{id:"treatWounds",name:y.i18n("PF2E.Actions.TreatWounds.Label"),encodedValue:[e,this.actorId,this.tokenId,"treatWounds"].join(this.delimiter)},{id:"rest",name:y.i18n("PF2E.Actor.Character.Rest.Label"),encodedValue:[e,this.actorId,this.tokenId,"rest"].join(this.delimiter)}];game.settings.get("pf2e","staminaVariant")&&t.push({id:"takeBreather",name:y.i18n("tokenActionHud.pf2e.takeBreather"),encodedValue:[e,this.actorId,this.tokenId,"takeBreather"].join(this.delimiter)});this.addActionsToActionList(t,{id:"rests",type:"system"})}_buildSaves(){const e="save",t=("multi"!==this.actorId?Object.entries(this.actor.saves):Object.entries(CONFIG.PF2E.saves)).map((t=>{const i=t[0],s=t[1].label??("string"==typeof t[1]?y.i18n(t[1]):""),n=`${`${y.i18n(a[e])}: `??""}${s}`,o=[e,this.actorId,this.tokenId,i].join(this.delimiter);return{id:i,name:s,encodedValue:o,listName:n}}));this.addActionsToActionList(t,{id:"saves",type:"system"})}_buildSkills(){const e="skill",t="multi"!==this.actorId?Object.entries(this.actor.skills).filter((e=>!!e[1].label&&e[1].label.length>1)):this._getSharedSkills();if(!t)return;const i=new Map;for(const e of t){const t=e[1].lore;i.has("skills")||i.set("skills",new Map),i.get("skills").set(e[0],e[1]),t&&(i.has("lore-skills")||i.set("lore-skills",new Map),i.get("lore-skills").set(e[0],e[1])),t||(i.has("core-skills")||i.set("core-skills",new Map),i.get("core-skills").set(e[0],e[1]))}for(const[t,s]of i){const i={id:t,type:"system"},o=[...s].map((t=>{const i=t[0],s=t[1],o=y.i18n(s.label)??y.i18n(CONFIG.PF2E.skillList[t[0]]),l=this.abbreviatedSkills?n[s.slug]??o:o,c=`${`${y.i18n(a[e])}: `??""}${l}`,r=[e,this.actorId,this.tokenId,i].join(this.delimiter),d=this.colorSkills&&s.rank>0?`tah-pf2e-skill-rank-${s.rank}`:"",m=s.check?.mod;return{id:i,name:l,encodedValue:r,cssClass:d,info1:{text:m||0===m?`${m>=0?"+":""}${m}`:""},listName:c}}));this.addActionsToActionList(o,i)}}_getSharedSkills(){if(!this.actors)return;const e=this.actors.map((e=>Object.entries(e.skills).filter((e=>!!e[1].label&&e[1].label.length>1)))),t=Math.min(...e.map((e=>e.length)));return e.find((e=>e.length===t)).filter((t=>e.every((e=>e.some((e=>e[0]===t[0]))))))}async _buildSpells(){const e={id:"spells",type:"system"},t=[...this.items].filter((e=>"spellcastingEntry"===e[1].type));for(const i of t){const t=`spells+${i[1].name.slugify({replacement:"-",strict:!0})}`,s={id:t,name:i[1].name,type:"system-derived",info1:this._getSpellDcInfo(i[1]),hasDerivedSubcategories:!0};await this.addSubcategoryToActionList(e,s),this.addSubcategoryInfo(s);const a=await i[1].getSpellData(),n=a.levels.filter((e=>e.active.length>0));for(const e of Object.entries(n)){const i={id:`${t}+${e[1].level}`,name:String(y.i18n(e[1].label)),type:"system-derived"};await this.addSubcategoryToActionList(s,i),await this._addSpellSlotInfo(i,e,a);const n=e[1].active.filter((e=>!e?.expended&&e)).map((e=>e.spell)),o=new Map(n.map((e=>[e.id,e])));await this._addActions(o,i,"spell")}}}async _addSpellSlotInfo(e,t,i){const s=t[1].isCantrip,a=i.isFlexible,n=i.isFocusPool,o=i.isInnate,l=i.isPrepared;if(!n&&(s||o))return;if(!n&&l&&!a)return;const c="spellSlot",r=this.actor.system.resources.focus,d=t[1].uses,m=n?"focus":`slot${t[1].level}`,u="focus"===m?r?.max:d?.max,h={text:u>=0?`${("focus"===m?r?.value:d?.value)??0}/${u}`:""};e.info={info1:h},this.addSubcategoryInfo(e);const p=[{id:`${i.id}>${m}>slotIncrease`,name:"+",encodedValue:[c,this.actorId,this.tokenId,`${i.id}>${m}>slotIncrease`].join(this.delimiter),cssClass:"shrink"},{id:`${i.id}>${m}>slotDecrease`,name:"-",encodedValue:[c,this.actorId,this.tokenId,`${i.id}>${m}>slotDecrease`].join(this.delimiter),cssClass:"shrink"}];this.addActionsToActionList(p,e)}_buildStrikes(){const e="strike",t={id:"strikes",type:"system"};let i=this.actor.system.actions.filter((t=>t.type===e&&(t.item.system.quantity>0||"npc"===this.actor.type)));if(i=i.filter(((e,t)=>t===i.findIndex((t=>e.label===t.label&&e.attackRollType===t.attackRollType)))),i)for(const s of i){const n=s.item.id,c=`strikes+${s.slug}`,r=s.label,d={id:c,name:r,hasDerivedSubcategories:!0,type:"system-derived"};if(this.addSubcategoryToActionList(t,d),s.auxiliaryActions?.length){const e="auxAction",t=s.auxiliaryActions.map(((t,i)=>{const s=encodeURIComponent(`${n}>${i}>`),o=t.label;return{id:s,name:o,listName:`${`${y.i18n(a[e])}: ${r}: `??""}${o}`}})),i={img:s.imageUrl};t[0]&&(t[0].img=y.getImage(i));const o=t.map((t=>this._getAction(e,t)));this.addActionsToActionList(o,d)}const m=i.altUsages?[s,...s.altUsages]:[s];for(const t of m){const i=s.glyph;let m;switch(`${t.item.isMelee}_${t.item.isThrown}_${t.item.isRanged}`){case"true_false_false":m="melee";break;case"false_true_true":m="thrown";break;case"false_false_true":m="ranged"}const u=`${c}+${m}`,h=t.attackRollType?y.i18n(t.attackRollType):y.i18n(l[m].name),p={id:u,name:h,icon:"thrown"!==m&&i?`<span style='font-family: "Pathfinder2eActions"; font-size: var(--font-size-20);'>${i}</span>`:o[m],type:"system-derived"};this.addSubcategoryToActionList(d,p);const g=`${y.i18n(a.strike)}: ${r}: ${h}: `??"",b=t.ready,f=t.variants.map(((t,i)=>{const a=encodeURIComponent(`${n}>${i}>`+m),o=t.label.includes("MAP")?s.totalModifier+parseInt(t.label.split(" ")[1]):parseInt(t.label.split(" ")[1]),l=this.calculateAttackPenalty?o>=0?`+${o}`:`${o}`:t.label;return{actionType:e,id:a,name:l,listName:`${g}${l}`,systemSelected:b}})),k=encodeURIComponent(`${n}>damage>${m}`),v=y.i18n("PF2E.DamageLabel"),I=`${g}${v}`;f.push({actionType:e,id:k,name:v,listName:I,systemSelected:b});const A=encodeURIComponent(`${n}>critical>${m}`),_=y.i18n("PF2E.CriticalDamageLabel"),S=`${g}${_}`;if(f.push({actionType:e,id:A,name:_,listName:S,systemSelected:b}),t.selectedAmmoId&&!t.ammunition){const i=this.actor.items.get(t.selectedAmmoId);if(i)i.actionType=e,f.push(i);else{const t="noAmmo",i=y.i18n("tokenActionHud.pf2e.noAmmo"),s=`${g}${i}`;f.push({actionType:e,id:t,name:i,listName:s,systemSelected:b})}}const P=f.map((t=>this._getAction(e,t)));this.addActionsToActionList(P,p)}}}_buildToggles(){const e="toggle",t=this.actor.system.toggles;if(!t.length)return;const i=t.map((t=>{const i=[t.domain,t.option].join("."),s=y.i18n(t.label);return{id:i,encodedValue:[e,this.actorId,this.tokenId,JSON.stringify(t)].join(this.delimiter),name:s,cssClass:`toggle${t.checked?" active":""}`}}));this.addActionsToActionList(i,{id:"toggles",type:"system"})}_getAttributePoolAction(e,t,i,s){const a=t.slugify({replacement:"-",strict:!0});return{id:a,name:t,encodedValue:[e,this.actorId,this.tokenId,a].join(this.delimiter),info1:{text:`${i}/${s}`}}}async _addActions(e,t,i="item"){if(0===e.size)return;if(!("string"==typeof t?t:t?.id))return;const s=[...e].map((e=>this._getAction(i,e[1])));await this.addActionsToActionList(s,t)}_getAction(e,t){const i=t.id??t._id,s=t?.name??t?.label,n=`${y.i18n(a[e])}: `??"",o=t.listName??`${n}${s}`;let l="";if(Object.hasOwn(t,"disabled")){l=`toggle${t.disabled?"":" active"}`}const c=t?.spellcasting?.id,r=t?.level,d="spell"===e?`${c}>${r}>${i}`:i,m=[e,this.actorId,this.tokenId,d].join(this.delimiter),u=t.system?.actions,h=t.system?.actionType?.value,p=parseInt((u||{}).value,10)||1,g=t.system?.time?.value,b="spell"===e?g:["free","reaction","passive"].includes(h)?h:p,f=this._getActionIcon(b),k=y.getImage(t),v="spell"===e?this._getSpellInfo(t):this._getItemInfo(t),I=v?.info1,A=v?.info2,_=v?.info3;return{id:i,name:s,encodedValue:m,cssClass:l,img:k,icon1:f,info1:I,info2:A,info3:_,listName:o,systemSelected:t?.systemSelected??null}}_isSlowAction(e){return["downtime","exploration"].includes(e.system.traits?.value)}_getSpellDcInfo(e){let t="";const i=e.statistic,s="function"==typeof i.dc?i.dc().value:i.dc.value,a=i.check.mod;return t=`${a>=0?`${y.i18n("tokenActionHud.pf2e.atk")} +${a}`:`${y.i18n("tokenActionHud.pf2e.atk")} ${a}`} ${`${y.i18n("tokenActionHud.pf2e.dc")}${s}`}`,t}_getSpellInfo(e){return{info1:this._getComponentsInfo(e),info2:this._getUsesData(e)}}_getComponentsInfo(e){return{text:e.components.value??e.system.components?.value??"",title:Object.entries(e.components).filter((e=>!0===e[1])).map((e=>e[0].trim().charAt(0).toUpperCase()+e[0].slice(1))).join(", ")}}_getUsesData(e){const t=e?.uses?.value,i=e?.uses?.max;return{text:t&&i>=0?`${t}/${i}`:""}}_getActors(){const e=["character","npc"],t=canvas.tokens.controlled.map((e=>e.actor));if(t.every((t=>e.includes(t.type))))return t}_isEquippedItem(e){const t=e.system.equipped?.carryType;return!!this.showUnequippedItems||!(!["held","worn"].includes(t)||e.system.containerId?.value?.length)}_getItemInfo(e){return{info1:{text:this._getQuantityData(e)??""}}}_getQuantityData(e){const t=e?.system?.quantity?.value;return t>1?t:""}_getActionIcon(e){return s[e]}_foundrySort(e,t){return e?.sort||t?.sort?e.sort-t.sort:0}}class RollHandler extends h{BLIND_ROLL_MODE="blindRoll";async doHandleActionEvent(e,t){const i=t.split("|");4!==i.length&&super.throwInvalidValueErr();const s=i[0],a=i[1],n=i[2],o=i[3];if(["item","feat","action","lore","ammo"].includes(s)&&this.isRenderItem())return this.doRenderItem(a,n,o);const l=["character","familiar","npc"];if("multi"===n&&"toggleCombat"!==o){const t=canvas.tokens.controlled.filter((e=>l.includes(e.actor?.type)));for(const i of t){const t=i.actor?.id,a=i.id;await this._handleMacros(e,s,t,a,o)}}else await this._handleMacros(e,s,a,n,o)}async _handleMacros(e,t,i,s,a){const n=y.getActor(i,s);let o;n&&(o=n.type);if(!["ability","spell","item","skill","lore","utility","toggle","strike"].includes(t))switch(o){case"npc":await this._handleUniqueActionsNpc(e,t,n,s,a);break;case"character":case"familiar":await this._handleUniqueActionsChar(e,t,n,s,a)}switch(t){case"ability":this._rollAbility(e,n,a);break;case"action":case"feat":case"item":this._rollItem(n,a);break;case"condition":this._toggleCondition(n,a);break;case"effect":this._adjustEffect(n,a);break;case"spell":await this._rollSpell(n,s,a);break;case"skill":await this._rollSkill(e,n,a);break;case"strike":this._rollStrikeChar(e,n,s,a);break;case"toggle":await this._performToggleMacro(i,s,a);break;case"utility":this._performUtilityMacro(s,a)}}async _handleUniqueActionsChar(e,t,i,s,a){switch(t){case"save":this._rollSave(e,i,a);break;case"attribute":case"initiative":case"perceptionCheck":this._rollAttributeChar(e,i,a);break;case"spellSlot":await this._adjustSpellSlot(i,a);break;case"heroPoints":await this._adjustResources(i,"heroPoints","value",a);break;case"recoveryCheck":i.rollRecovery({event:e});break;case"familiarAttack":this._rollFamiliarAttack(e,i);break;case"auxAction":this._performAuxAction(i,s,a)}}async _handleUniqueActionsNpc(e,t,i,s,a){switch(t){case"attribute":case"initiative":case"perceptionCheck":await this._rollAttributeNpc(e,i,a);break;case"save":this._rollSave(e,i,a);break;case"strike":this._rollStrikeNpc(e,i,s,a)}}async _rollSkill(e,t,i){const s=t.skills[i];await s.check.roll({event:e})}_rollAbility(e,t,i){t.rollAbility(e,i)}_rollAttributeChar(e,t,i){const s=t.system.attributes[i];if(s){const i=t.getRollOptions(["all",s]);s.roll({event:e,options:i})}else t.rollAttribute(e,i)}async _rollAttributeNpc(e,t,i){"initiative"===i?await t.rollInitiative({createCombatants:!0}):t.rollAttribute(e,i)}async _adjustSpellSlot(e,t){const i=decodeURIComponent(t).split(">"),s=i[0],a=i[1],n=i[2],o=e.items.get(s);let l,c,r;if("focus"===a)l=e.system.resources.focus.value,c=e.system.resources.focus.max;else{const e=o.system.slots;l=e[a].value,c=e[a].max}switch(n){case"slotIncrease":if(l>=c)break;l++;break;case"slotDecrease":if(l<=0)break;l--}"focus"===a?e.update({"data.resources.focus.value":l}):(r=[{_id:o.id,data:{slots:{[a]:{value:l}}}}],await Item.updateDocuments(r,{parent:e})),Hooks.callAll("forceUpdateTokenActionHUD")}_rollSave(e,t,i){t.saves[i].check.roll({event:e})}async _updateRollMode(e){await game.settings.set("core","rollMode",e)}_rollStrikeChar(e,t,i,s){const a=decodeURIComponent(s).split(">"),n=a[0],o=a[1],l=a[2]?a[2]:null;let c=t.system.actions.filter((e=>"strike"===e.type)).find((e=>(e.item.id??e.slug)===n));if(this.isRenderItem()){const e=c.item;if(e&&"xxPF2ExUNARMEDxx"!==e.id)return this.doRenderItem(t.id,i,e.id)}switch(null!==l&&c.altUsages?.length&&("melee"!==l||c.item.isMelee||(c=c.altUsages.find((e=>e.item.isMelee))),"thrown"===l&&(c=c.altUsages.find((e=>e.item.isThrown)))),o){case"damage":c.damage({event:e});break;case"critical":c.critical({event:e});break;default:c.variants[o]?.roll({event:e})}}_performAuxAction(e,t,i){const s=decodeURIComponent(i).split(">"),a=s[0],n=s[1],o=s[2];let l=e.system.actions.filter((e=>"strike"===e.type)).find((e=>(e.item.id??e.slug)===a));if(this.isRenderItem()){const i=l.origin;if(i)return this.doRenderItem(e.id,t,i.id)}""!==o&&(l=l[o]),l.auxiliaryActions[n]?.execute()}_rollStrikeNpc(e,t,i,s){const a=decodeURIComponent(s).split(">"),n=a[0],o=a[1];if("plus"===n){const e=t.items.find((e=>0===o.toUpperCase().localeCompare(e.name.toUpperCase(),void 0,{sensitivity:"base"})));return this.isRenderItem()?this.doRenderItem(t.id,i,e.id):void e.toChat()}if(this.isRenderItem())return this.doRenderItem(t.id,i,n);const l=t.items.get(n);switch(o){case"damage":l.rollNPCDamage(e);break;case"critical":l.rollNPCDamage(e,!0);break;case"0":l.rollNPCAttack(e);break;case"1":l.rollNPCAttack(e,2);break;case"2":l.rollNPCAttack(e,3)}}_rollItem(e,t){e.items.get(t).toChat()}_rollFamiliarAttack(e,t){const i=t.getRollOptions(["all","attack"]);t.system.attack.roll(e,i)}async _rollSpell(e,t,i){const s=decodeURIComponent(i).split(">"),[a,n,o,l]=s;if(this.isRenderItem())return this.doRenderItem(e.id,t,o);const c=e.items.get(a),r=e.items.get(o);c&&r&&(await c.cast(r,{message:!l,consume:!0,level:Number(n)}),Hooks.callAll("forceUpdateTokenActionHUD"))}async _performUtilityMacro(e,t){const i=y.getToken(e);switch(t){case"treatWounds":this._executeMacroById("6duZj0Ygiqv712rq");break;case"rest":this._executeMacroById("0GU2sdy3r2MeC56x");break;case"takeBreather":this._executeMacroById("aS6F7PSUlS9JM5jr");break;case"toggleCombat":i.toggleCombat(),Hooks.callAll("forceUpdateTokenActionHUD");break;case"toggleVisibility":i.toggleVisibility();break;case"endTurn":game.combat?.current?.tokenId===e&&await(game.combat?.nextTurn())}}async _executeMacroById(e){game.packs.get("pf2e.pf2e-macros").getDocument(e).then((e=>e.execute()))}async _adjustResources(e,t,i,s){let a=e.system.resources[t][i];const n=e.system.resources[t].max;if(this.rightClick){if(a<=0)return;a--}else{if(a>=n)return;a++}const o=[{_id:e.id,data:{resources:{[t]:{[i]:a}}}}];await Actor.updateDocuments(o),Hooks.callAll("forceUpdateTokenActionHUD")}async _toggleCondition(e,t){this.rightClick?e.decreaseCondition(t):e.increaseCondition(t),Hooks.callAll("forceUpdateTokenActionHUD")}async _adjustEffect(e,t){const i=y.getItem(e,t);this.rightClick?i.decrease():i.increase(),Hooks.callAll("forceUpdateTokenActionHUD")}async _performToggleMacro(e,t,i){const s=y.getActor(e,t),a=JSON.parse(i);a.domain&&a.option&&await s.toggleRollOption(a.domain,a.option,a.itemId)}}let b=null;function register(t){game.settings.register(e.ID,"calculateAttackPenalty",{name:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"colorSkills",{name:game.i18n.localize("tokenActionHud.pf2e.settings.colorSkills.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.colorSkills.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.on("i18nInit",(async()=>{b={categories:[{nestId:"attack",id:"attack",name:game.i18n.localize("PF2E.AttackLabel"),subcategories:[{nestId:"attack_attack",id:"attack",name:game.i18n.localize("PF2E.AttackLabel"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"actions",id:"actions",name:game.i18n.localize("PF2E.ActionsActionsHeader"),subcategories:[{nestId:"actions_toggles",id:"toggles",name:game.i18n.localize("PF2E.TogglesLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_strikes",id:"strikes",name:game.i18n.localize("PF2E.StrikesLabel"),type:"system",hasDerivedSubcategories:!0},{nestId:"actions_actions",id:"actions",name:game.i18n.localize("PF2E.ActionsActionsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_reactions",id:"reactions",name:game.i18n.localize("PF2E.ActionsReactionsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_free-actions",id:"free-actions",name:game.i18n.localize("PF2E.ActionsFreeActionsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"actions_passives",id:"passives",name:game.i18n.localize("PF2E.NPC.PassivesLabel"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"inventory",id:"inventory",name:game.i18n.localize("PF2E.TabInventoryLabel"),subcategories:[{nestId:"inventory_weapons",id:"weapons",name:game.i18n.localize("PF2E.InventoryWeaponsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_armor",id:"armor",name:game.i18n.localize("PF2E.InventoryArmorHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_equipment",id:"equipment",name:game.i18n.localize("PF2E.InventoryEquipmentHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_consumables",id:"consumables",name:game.i18n.localize("PF2E.InventoryConsumablesHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_containers",id:"containers",name:game.i18n.localize("PF2E.InventoryBackpackHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"inventory_treasure",id:"treasure",name:game.i18n.localize("PF2E.InventoryTreasureHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"feats",id:"feats",name:game.i18n.localize("PF2E.TabFeatsLabel"),subcategories:[{nestId:"feats_ancestry-features",id:"ancestry-features",name:game.i18n.localize("PF2E.FeaturesAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_class-features",id:"class-features",name:game.i18n.localize("PF2E.FeaturesClassHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_ancestry-feats",id:"ancestry-feats",name:game.i18n.localize("PF2E.FeatAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_class-feats",id:"class-feats",name:game.i18n.localize("PF2E.FeatClassHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_skill-feats",id:"skill-feats",name:game.i18n.localize("PF2E.FeatSkillHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_general-feats",id:"general-feats",name:game.i18n.localize("PF2E.FeatGeneralHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"feats_general-feats",id:"general-feats",name:game.i18n.localize("PF2E.FeatBonusHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"spells",id:"spells",name:game.i18n.localize("PF2E.SpellLabelPlural"),subcategories:[{nestId:"spells_spells",id:"spells",name:game.i18n.localize("PF2E.SpellLabelPlural"),type:"system",hasDerivedSubcategories:!0}]},{nestId:"attributes",id:"attributes",name:game.i18n.localize("tokenActionHud.pf2e.attributes"),subcategories:[{nestId:"attributes_hero-points",id:"hero-points",name:game.i18n.localize("PF2E.HeroPointsLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"attributes_initiative",id:"initiative",name:game.i18n.localize("PF2E.InitiativeLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"attributes_perception-check",id:"perception-check",name:game.i18n.localize("PF2E.PerceptionLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"attributes_saves",id:"saves",name:game.i18n.localize("PF2E.SavesHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"skills",id:"skills",name:game.i18n.localize("PF2E.SkillsLabel"),subcategories:[{nestId:"skills_core-skills",id:"core-skills",name:game.i18n.localize("PF2E.CoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1},{nestId:"skills_lore-skills",id:"lore-skills",name:game.i18n.localize("PF2E.LoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"effects",id:"effects",name:game.i18n.localize("PF2E.EffectsLabel"),subcategories:[{nestId:"effects_conditions",id:"conditions",name:game.i18n.localize("PF2E.ConditionsLabel"),type:"system",hasDerivedSubcategories:!1},{nestId:"effects_effects",id:"effects",name:game.i18n.localize("PF2E.EffectsLabel"),type:"system",hasDerivedSubcategories:!1}]},{nestId:"utility",id:"utility",name:game.i18n.localize("tokenActionHud.utility"),subcategories:[{nestId:"utility_combat",id:"combat",name:game.i18n.localize("tokenActionHud.combat"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_token",id:"token",name:game.i18n.localize("tokenActionHud.token"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_recovery-check",id:"recovery-check",name:game.i18n.localize("PF2E.Check.Specific.Recovery"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_rests",id:"rests",name:game.i18n.localize("tokenActionHud.pf2e.rests"),type:"system",hasDerivedSubcategories:!1},{nestId:"utility_utility",id:"utility",name:game.i18n.localize("tokenActionHud.utility"),type:"system",hasDerivedSubcategories:!1}]}],subcategories:[{id:"attack",name:game.i18n.localize("PF2E.AttackLabel"),type:"system",hasDerivedSubcategories:!1},{id:"toggles",name:game.i18n.localize("PF2E.TogglesLabel"),type:"system",hasDerivedSubcategories:!1},{id:"strikes",name:game.i18n.localize("PF2E.StrikesLabel"),type:"system",hasDerivedSubcategories:!0},{id:"actions",name:game.i18n.localize("PF2E.ActionsActionsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"reactions",name:game.i18n.localize("PF2E.ActionsReactionsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"free-actions",name:game.i18n.localize("PF2E.ActionsFreeActionsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"passives",name:game.i18n.localize("PF2E.NPC.PassivesLabel"),type:"system",hasDerivedSubcategories:!1},{id:"weapons",name:game.i18n.localize("PF2E.InventoryWeaponsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"armor",name:game.i18n.localize("PF2E.InventoryArmorHeader"),type:"system",hasDerivedSubcategories:!1},{id:"equipment",name:game.i18n.localize("PF2E.InventoryEquipmentHeader"),type:"system",hasDerivedSubcategories:!1},{id:"consumables",name:game.i18n.localize("PF2E.InventoryConsumablesHeader"),type:"system",hasDerivedSubcategories:!1},{id:"containers",name:game.i18n.localize("PF2E.InventoryBackpackHeader"),type:"system",hasDerivedSubcategories:!1},{id:"treasure",name:game.i18n.localize("PF2E.InventoryTreasureHeader"),type:"system",hasDerivedSubcategories:!1},{id:"ancestry-features",name:game.i18n.localize("PF2E.FeaturesAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{id:"class-features",name:game.i18n.localize("PF2E.FeaturesClassHeader"),type:"system",hasDerivedSubcategories:!1},{id:"ancestry-feats",name:game.i18n.localize("PF2E.FeatAncestryHeader"),type:"system",hasDerivedSubcategories:!1},{id:"class-feats",name:game.i18n.localize("PF2E.FeatClassHeader"),type:"system",hasDerivedSubcategories:!1},{id:"skill-feats",name:game.i18n.localize("PF2E.FeatSkillHeader"),type:"system",hasDerivedSubcategories:!1},{id:"general-feats",name:game.i18n.localize("PF2E.FeatGeneralHeader"),type:"system",hasDerivedSubcategories:!1},{id:"bonus-feats",name:game.i18n.localize("PF2E.FeatBonusHeader"),type:"system",hasDerivedSubcategories:!1},{id:"spells",name:game.i18n.localize("PF2E.SpellLabelPlural"),type:"system",hasDerivedSubcategories:!0},{id:"hero-points",name:game.i18n.localize("PF2E.HeroPointsLabel"),type:"system",hasDerivedSubcategories:!1},{id:"initiative",name:game.i18n.localize("PF2E.InitiativeLabel"),type:"system",hasDerivedSubcategories:!1},{id:"perception-check",name:game.i18n.localize("PF2E.PerceptionLabel"),type:"system",hasDerivedSubcategories:!1},{id:"core-skills",name:game.i18n.localize("PF2E.CoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"lore-skills",name:game.i18n.localize("PF2E.LoreSkillsHeader"),type:"system",hasDerivedSubcategories:!1},{id:"conditions",name:game.i18n.localize("PF2E.ConditionsLabel"),type:"system",hasDerivedSubcategories:!1},{id:"effects",name:game.i18n.localize("PF2E.EffectsLabel"),type:"system",hasDerivedSubcategories:!1},{id:"combat",name:game.i18n.localize("tokenActionHud.combat"),type:"system",hasDerivedSubcategories:!1},{id:"token",name:game.i18n.localize("tokenActionHud.token"),type:"system",hasDerivedSubcategories:!1},{id:"recovery-check",name:game.i18n.localize("PF2E.Check.Specific.Recovery"),type:"system",hasDerivedSubcategories:!1},{id:"rests",name:game.i18n.localize("tokenActionHud.pf2e.rests"),type:"system",hasDerivedSubcategories:!1},{id:"saves",name:game.i18n.localize("PF2E.SavesHeader"),type:"system",hasDerivedSubcategories:!1},{id:"utility",name:game.i18n.localize("tokenActionHud.utility"),type:"system",hasDerivedSubcategories:!1}]}}));class SystemManager extends p{doGetCategoryManager(e){return new m}doGetActionHandler(e){return new ActionHandler(e)}getAvailableRollHandlers(){return{core:"Core PF2E"}}doGetRollHandler(e){let t;return t=new RollHandler,t}doRegisterSettings(e){register(e)}async doRegisterDefaultFlags(){return b}}Hooks.once("ready",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.2",SystemManager:SystemManager},Hooks.call("tokenActionHudSystemReady",t)}));export{s as ACTION_ICON,a as ACTION_TYPE,ActionHandler,t as CORE_MODULE,r as CoreActionHandler,d as CoreActionListExtender,m as CoreCategoryManager,u as CorePreRollHandler,h as CoreRollHandler,p as CoreSystemManager,y as CoreUtils,b as DEFAULTS,g as Logger,e as MODULE,i as REQUIRED_CORE_MODULE_VERSION,RollHandler,n as SKILL_ABBREVIATION,o as STRIKE_ICON,l as STRIKE_USAGE,SystemManager,Utils,register};
